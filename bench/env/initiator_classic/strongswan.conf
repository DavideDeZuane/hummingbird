charon {
	start-scripts {
		load_conn = swanctl --load-all --noprompt
	}
	# set the delay for the receiving packet to simulate larger RTT
	# and we specify wich type of exchange to delay

	# parameter for the rentransmission, this is a exponential retransmission 
	# T_n = T_0 * k^n , n < N_max
	# k: 		retransmit_base	(base dell'esponente)
	# T_0: 		retransmit_timeout (timeout iniziale)
	# N_max:	retransmit_tries (numero massimo di tentativi)
	retransmit_base = 1.8
	retransmit_timeout = 4.0 
	retransmit_tries = 5
	
	# it set to 0 the port allocated is chosen randomly
	# this hints is useful for the initiator only
	port = 500
	port_nat_t = 4500

	keep_alive = 20s
	
	make_before_break = no

	# This value set the fragmentation size, if set to 0 is address_family specific
	# 576 byte for IPv4
	# 1280 byte for IPv6
	fragment_size = 1280
	
	send_vendor_id = yes

	# extra payload
	#send_vendor_id = no
	#flow_redirects = no
	#multiple_authentication = no
	#signature_authentication = no

	# this for the compliance with RFC minimal ike
	initiator_only = yes

  	load_modular = no
	load = random nonce openssl pem pkcs1 curl vici kernel-netlink socket-default updown pubkey save-keys ml
  	# to check the loaded plugins run swanctl --stats

  filelog {
    # ------------------------------------------
    # Dump All
    # ------------------------------------------
    # See the logging section of the documentation for other details
    # but for dump all shared secret and keys set ike debug level to 4
    charon {
      path = /var/log/charon.log
      time_format = %S
      time_precision = us
      ike_name = no
      append = no
      default = 0
      ike = 2
      net = 2
      flush_line = yes
    }
  }

	plugins {
    # ------------------------------------------
    # Other Plugins settings import 
    # ------------------------------------------
    include strongswan.d/charon/*.conf
    # ------------------------------------------
    # Dump Keys 
    # ------------------------------------------
    # This plugin must be enabled during the configure phase of the installation of strongswan 
    # It prints the key for authentication and encryption of the traffic in the wireshark format to decrypt the traffic
  	save-keys {
      		#load = yes
		ike = yes
		esp = yes
		wireshark_keys = /var/log
	  }
  }



}
